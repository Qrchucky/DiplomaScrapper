{"version":3,"sources":["../../src/lib/scrapper.js"],"names":["url","axios","get","html","data","$","cheerio","load","offers","pageLimiter","pageLimit","parseInt","text","replace","dt","Date","offersFromMongoDB","Offer","find","sort","scrapeDate","exec","console","log","lastScrapedOfferLink","length","link","arrayFromScrapes","offersObj","i","currentLink","attr","push","title","img","price","type","localization","parent","date","getFullYear","nextPageNumber","match","nextUrl","getOlxScrape","concat","timer","giveGeocodingSomeTime","firstUrl","getOffersObj","req","res","next","offersPromise","monthNames","NodeGeocoder","options","geocoder","counter","offersToAddToMongoDB","shortid","generate","includes","getDate","getMonth","geocode","then","lat","latitude","toString","lng","longitude","latToSwap","substr","lngToSwap","randLat","Math","floor","random","randLng","parseFloat","catch","err","id","position","collection","insertMany","docs","error","runCron","require","express","router","Router","mongoose","model","provider","httpAdapter","apiKey","formatter","ms","setTimeout"],"mappings":"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","file":"scrapper.js","sourcesContent":["const axios = require(\"axios\");\r\nconst cheerio = require(\"cheerio\");\r\nconst shortid = require(\"shortid\");\r\nconst NodeGeocoder = require(\"node-geocoder\");\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\n\r\nconst mongoose = require(\"mongoose\");\r\nrequire(\"../models/Offer\");\r\n\r\nconst Offer = mongoose.model(\"Offers\");\r\n\r\n// Options for Google Geocoding\r\nvar options = {\r\n  provider: \"google\",\r\n  httpAdapter: \"https\",\r\n  apiKey: \"AIzaSyAF-_e-JJwREzFyL4GsSBDxoqCxMPptirg\",\r\n  formatter: null\r\n};\r\n\r\n// Scraping function\r\nexport async function getOlxScrape(url) {\r\n  const { data: html } = await axios.get(url);\r\n  const $ = cheerio.load(html);\r\n  const offers = $(\"#offers_table .offer-wrapper\");\r\n\r\n  // Get last page value\r\n  const pageLimiter = $(\"[data-cy='page-link-last']\");\r\n  const pageLimit = parseInt(pageLimiter.text().replace(/\\s\\s+/g, \"\"));\r\n\r\n  const dt = new Date();\r\n\r\n  let offersFromMongoDB;\r\n\r\n  try {\r\n    offersFromMongoDB = await Offer.find()\r\n      .sort({ scrapeDate: -1 })\r\n      .exec();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  const lastScrapedOfferLink =\r\n    offersFromMongoDB.length !== 0\r\n      ? offersFromMongoDB[offersFromMongoDB.length - 1].link\r\n      : \"\";\r\n\r\n  // Add only new offers to offersObj Array\r\n  const arrayFromScrapes = Array.from(offers);\r\n  const offersObj = [];\r\n\r\n  for (let i = 0; i < arrayFromScrapes.length; i++) {\r\n    const currentLink = $(arrayFromScrapes[i])\r\n      .find('[data-cy=\"listing-ad-title\"]')\r\n      .attr(\"href\");\r\n\r\n    if (currentLink !== lastScrapedOfferLink) {\r\n      offersObj.push({\r\n        title: $(arrayFromScrapes[i])\r\n          .find('[data-cy=\"listing-ad-title\"]')\r\n          .text()\r\n          .replace(/\\s\\s+/g, \"\"),\r\n        link: $(arrayFromScrapes[i])\r\n          .find('[data-cy=\"listing-ad-title\"]')\r\n          .attr(\"href\"),\r\n        img: $(arrayFromScrapes[i])\r\n          .find(\"img\")\r\n          .attr(\"src\"),\r\n        price: $(arrayFromScrapes[i])\r\n          .find(\".td-price strong\")\r\n          .text(),\r\n        type: $(arrayFromScrapes[i])\r\n          .find(\".title-cell p small\")\r\n          .text()\r\n          .replace(/\\s\\s+/g, \"\"),\r\n        localization: $(arrayFromScrapes[i])\r\n          .find(\"[data-icon='location-filled']\")\r\n          .parent()\r\n          .text()\r\n          .replace(/\\s\\s+/g, \"\"),\r\n        date: `${$(arrayFromScrapes[i])\r\n          .find(\"[data-icon='clock']\")\r\n          .parent()\r\n          .text()\r\n          .replace(/^\\s+|\\s+$/g, \"\")\r\n          .replace(\"  \", \"-\")}-${dt.getFullYear()}`\r\n      });\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Recursive iteration through all pages the get all the data\r\n  if (offersObj.length < 1) {\r\n    return offersObj;\r\n  } else {\r\n    // Regex which creates next page number from current url\r\n    const nextPageNumber = parseInt(url.match(/page=(\\d+)$/)[1], 10) + 1;\r\n    // If we didnt reach last page\r\n    if (nextPageNumber <= 10) {\r\n      const nextUrl = `https://www.olx.pl/nieruchomosci/mieszkania/katowice/?page=${nextPageNumber}`;\r\n      // Concat new values to offersObj array\r\n      return offersObj.concat(await getOlxScrape(nextUrl));\r\n    } else {\r\n      return offersObj;\r\n    }\r\n  }\r\n}\r\n\r\n// Forcing loop pause for x time (Google Geocoding API can handle only 50 request/sec)\r\nasync function giveGeocodingSomeTime() {\r\n  await timer(250);\r\n}\r\n\r\nfunction timer(ms) {\r\n  return new Promise(res => setTimeout(res, ms));\r\n}\r\n\r\n// Starting point to scraping function\r\nexport async function getOffersObj() {\r\n  const firstUrl =\r\n    \"https://www.olx.pl/nieruchomosci/mieszkania/katowice/?page=1\";\r\n  const offersObj = await getOlxScrape(firstUrl);\r\n\r\n  return offersObj;\r\n}\r\n\r\n// CRON calls this function every x time (adding new values to database)\r\nexport async function runCron(req, res, next) {\r\n  console.log(\"Scraping!\");\r\n  const offersPromise = await getOffersObj();\r\n\r\n  const dt = new Date();\r\n  const monthNames = [\r\n    \"sty\",\r\n    \"lut\",\r\n    \"mar\",\r\n    \"kwi\",\r\n    \"maj\",\r\n    \"cze\",\r\n    \"lip\",\r\n    \"sie\",\r\n    \"wrz\",\r\n    \"paź\",\r\n    \"lis\",\r\n    \"gru\"\r\n  ];\r\n\r\n  const geocoder = await NodeGeocoder(options);\r\n  let counter = 0;\r\n\r\n  const offersToAddToMongoDB = [];\r\n\r\n  // Iterate though all the scraped data array\r\n  for (let i = 0; i < offersPromise.length; i++) {\r\n    /**\r\n     * Every single offer calls Geocoding twice (for latitude and longitude)\r\n     * But Google Geocoding API can handle only 50 request/sec\r\n     * So when counter reaches 24 (48 Geocoding request)\r\n     * We force loop to wait some time\r\n     */\r\n    if (counter >= 48) {\r\n      counter = 0;\r\n      await giveGeocodingSomeTime();\r\n    }\r\n\r\n    // Push new value to databse\r\n    offersToAddToMongoDB.push({\r\n      id: shortid.generate(),\r\n      title: offersPromise[i].title,\r\n      link: offersPromise[i].link,\r\n      img: offersPromise[i].img,\r\n      price: offersPromise[i].price,\r\n      type: offersPromise[i].type,\r\n      localization: offersPromise[i].localization,\r\n      scrapeDate: new Date(),\r\n      date: offersPromise[i].date.includes(\"dzisiaj\")\r\n        ? `${dt.getDate()}-${monthNames[dt.getMonth()]}-${dt.getFullYear()}`\r\n        : offersPromise[i].date.includes(\"wczoraj\")\r\n        ? `${dt.getDate() - 1}-${monthNames[dt.getMonth()]}-${dt.getFullYear()}`\r\n        : offersPromise[i].date,\r\n      position: await geocoder\r\n        .geocode(\r\n          offersPromise[i].localization === \"Katowice, Śródmieście\"\r\n            ? \"Katowice, Dworzec\"\r\n            : offersPromise[i].localization\r\n        )\r\n        .then(res => {\r\n          let lat = res[0].latitude.toString();\r\n          let lng = res[0].longitude.toString();\r\n\r\n          const latToSwap = lat.substr(5);\r\n          const lngToSwap = lng.substr(5);\r\n\r\n          const randLat = Math.floor(Math.random(parseInt(latToSwap)) * 10000);\r\n          const randLng = Math.floor(Math.random(parseInt(lngToSwap)) * 10000);\r\n\r\n          lat = lat.substr(0, 5) + randLat;\r\n          lng = lng.substr(0, 5) + randLng;\r\n\r\n          return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n        })\r\n        .catch(function(err) {\r\n          console.log(err);\r\n        })\r\n    });\r\n\r\n    counter++;\r\n  }\r\n\r\n  if (offersToAddToMongoDB.length !== 0) {\r\n    Offer.collection.insertMany(offersToAddToMongoDB, function(err, docs) {\r\n      if (err) {\r\n        return console.error(err);\r\n      } else {\r\n        console.log(\"Multiple documents inserted to Collection\");\r\n      }\r\n    });\r\n  }\r\n\r\n  console.log(\"DONE!\");\r\n}\r\n\r\n// runCron();\r\n"]}