{"version":3,"sources":["../../src/lib/scrapper.js"],"names":["timer","giveGeocodingSomeTime","req","res","next","console","log","runCron","shortid","require","NodeGeocoder","express","router","Router","mongoose","Offer","model","options","provider","httpAdapter","apiKey","formatter","ms","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;AAoBA;;sFACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQA,MAAM,GAAN,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,qB;;;;;AAQf;;uFACO,kBAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC;AAAA;AAAA;AAAA;AAAA;AACLC,oBAAQC,GAAR,CAAY,WAAZ;AACA;AACA;AACA;AACA;;AALK,2BAOLD,OAPK;AAAA;AAAA,mBAOa,yCAPb;;AAAA;AAAA;;AAAA,yBAOGC,GAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,O;;;;;AAtBtB;;AACA;;AACA;;;;AAVA,IAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,eAAeD,QAAQ,eAAR,CAArB;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,SAASD,QAAQE,MAAR,EAAf;AACA,IAAMC,WAAWL,QAAQ,UAAR,CAAjB;AACAA,QAAQ,iBAAR;AACA,IAAMM,QAAQD,SAASE,KAAT,CAAe,QAAf,CAAd;;AAMA;AACA,IAAIC,UAAU;AACZC,YAAU,QADE;AAEZC,eAAa,OAFD;AAGZC,UAAQ,yCAHI;AAIZC,aAAW;AAJC,CAAd;;AAYA,SAASrB,KAAT,CAAesB,EAAf,EAAmB;AACjB,SAAO,sBAAY,UAACnB,GAAD;AAAA,WAASoB,WAAWpB,GAAX,EAAgBmB,EAAhB,CAAT;AAAA,GAAZ,CAAP;AACD;;AA0GDf","file":"scrapper.js","sourcesContent":["const shortid = require(\"shortid\");\r\nconst NodeGeocoder = require(\"node-geocoder\");\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\nconst mongoose = require(\"mongoose\");\r\nrequire(\"../models/Offer\");\r\nconst Offer = mongoose.model(\"Offers\");\r\n\r\nimport { getOlxOffersObj } from \"./OLXScrapper\";\r\nimport { getOtoDomOffersObj } from \"./OtoDomScrapper\";\r\nimport { getGratkaOffersObj } from \"./GratkaScrapper\";\r\n\r\n// Options for Google Geocoding\r\nvar options = {\r\n  provider: \"google\",\r\n  httpAdapter: \"https\",\r\n  apiKey: \"AIzaSyAF-_e-JJwREzFyL4GsSBDxoqCxMPptirg\",\r\n  formatter: null,\r\n};\r\n\r\n// Forcing loop pause for x time (Google Geocoding API can handle only 50 request/sec)\r\nasync function giveGeocodingSomeTime() {\r\n  await timer(250);\r\n}\r\n\r\nfunction timer(ms) {\r\n  return new Promise((res) => setTimeout(res, ms));\r\n}\r\n\r\n// CRON calls this function every x time (adding new values to database)\r\nexport async function runCron(req, res, next) {\r\n  console.log(\"Scraping!\");\r\n  // const offersPromise = [\r\n  //   ...(await getOlxOffersObj()),\r\n  //   ...(await getOtoDomOffersObj()),\r\n  // ];\r\n\r\n  console.log(await getGratkaOffersObj());\r\n\r\n  // const dt = new Date();\r\n  // const monthNames = [\r\n  //   \"sty\",\r\n  //   \"lut\",\r\n  //   \"mar\",\r\n  //   \"kwi\",\r\n  //   \"maj\",\r\n  //   \"cze\",\r\n  //   \"lip\",\r\n  //   \"sie\",\r\n  //   \"wrz\",\r\n  //   \"paź\",\r\n  //   \"lis\",\r\n  //   \"gru\",\r\n  // ];\r\n\r\n  // const geocoder = await NodeGeocoder(options);\r\n  // let counter = 0;\r\n\r\n  // const offersToAddToMongoDB = [];\r\n\r\n  // // Iterate though all the scraped data array\r\n  // for (let i = 0; i < offersPromise.length; i++) {\r\n  //   /**\r\n  //    * Every single offer calls Geocoding (for latitude and longitude)\r\n  //    * But Google Geocoding API can handle only 50 request/sec\r\n  //    * So when counter reaches 48 (48 Geocoding request)\r\n  //    * We force loop to wait some time\r\n  //    */\r\n  //   if (counter >= 48) {\r\n  //     counter = 0;\r\n  //     await giveGeocodingSomeTime();\r\n  //   }\r\n\r\n  //   // Push new value to databse\r\n  //   offersToAddToMongoDB.push({\r\n  //     id: shortid.generate(),\r\n  //     title: offersPromise[i].title,\r\n  //     link: offersPromise[i].link,\r\n  //     img: offersPromise[i].img,\r\n  //     price: offersPromise[i].price,\r\n  //     type: offersPromise[i].type,\r\n  //     localization: offersPromise[i].localization,\r\n  //     scrapeDate: new Date(),\r\n  //     date:\r\n  //       offersPromise[i].date && offersPromise[i].date.includes(\"dzisiaj\")\r\n  //         ? `${dt.getDate()}-${monthNames[dt.getMonth()]}-${dt.getFullYear()}`\r\n  //         : offersPromise[i].date && offersPromise[i].date.includes(\"wczoraj\")\r\n  //         ? `${dt.getDate() - 1}-${\r\n  //             monthNames[dt.getMonth()]\r\n  //           }-${dt.getFullYear()}`\r\n  //         : offersPromise[i].date,\r\n  //     position: await geocoder\r\n  //       .geocode(\r\n  //         offersPromise[i].localization === \"Katowice, Śródmieście\"\r\n  //           ? \"Katowice, Dworzec\"\r\n  //           : offersPromise[i].localization\r\n  //       )\r\n  //       .then((res) => {\r\n  //         let lat = res[0].latitude.toString();\r\n  //         let lng = res[0].longitude.toString();\r\n\r\n  //         const latToSwap = lat.substr(5);\r\n  //         const lngToSwap = lng.substr(5);\r\n\r\n  //         const randLat = Math.floor(Math.random(parseInt(latToSwap)) * 10000);\r\n  //         const randLng = Math.floor(Math.random(parseInt(lngToSwap)) * 10000);\r\n\r\n  //         lat = lat.substr(0, 5) + randLat;\r\n  //         lng = lng.substr(0, 5) + randLng;\r\n\r\n  //         return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n  //       })\r\n  //       .catch(function (err) {\r\n  //         console.log(err);\r\n  //       }),\r\n  //   });\r\n\r\n  //   counter++;\r\n  // }\r\n\r\n  // if (offersToAddToMongoDB.length !== 0) {\r\n  //   Offer.collection.insertMany(offersToAddToMongoDB, function (err, docs) {\r\n  //     if (err) {\r\n  //       return console.error(err);\r\n  //     } else {\r\n  //       console.log(\"Multiple documents inserted to Collection\");\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // console.log(\"DONE!\");\r\n}\r\n\r\nrunCron();\r\n"]}