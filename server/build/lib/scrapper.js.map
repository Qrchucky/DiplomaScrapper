{"version":3,"sources":["../../src/lib/scrapper.js"],"names":["url","axios","get","html","data","$","cheerio","load","offers","pageLimiter","pageLimit","parseInt","text","replace","db","value","olxScrapes","dt","Date","offersObj","reduce","acc","el","currentLink","find","attr","item","link","title","img","price","type","localization","parent","date","getFullYear","length","nextPageNumber","match","nextUrl","getOlxScrape","concat","timer","giveGeocodingSomeTime","firstUrl","getOffersObj","req","res","next","console","log","offersPromise","monthNames","NodeGeocoder","options","geocoder","counter","i","router","post","send","shortid","generate","includes","getDate","getMonth","geocode","then","lat","latitude","toString","lng","longitude","latToSwap","substr","lngToSwap","randLat","Math","floor","random","randLng","parseFloat","catch","err","id","position","push","write","runCron","require","express","Router","provider","httpAdapter","apiKey","formatter","ms","setTimeout"],"mappings":"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","file":"scrapper.js","sourcesContent":["const axios = require(\"axios\");\r\nconst cheerio = require(\"cheerio\");\r\nconst db = require(\"./db\");\r\nconst shortid = require(\"shortid\");\r\nconst NodeGeocoder = require(\"node-geocoder\");\r\n\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\n\r\n// Options for Google Geocoding\r\nvar options = {\r\n  provider: \"google\",\r\n  httpAdapter: \"https\",\r\n  apiKey: \"AIzaSyAF-_e-JJwREzFyL4GsSBDxoqCxMPptirg\",\r\n  formatter: null\r\n};\r\n\r\n// Scraping function\r\nexport async function getOlxScrape(url) {\r\n  const { data: html } = await axios.get(url);\r\n  const $ = cheerio.load(html);\r\n  const offers = $(\"#offers_table .offer-wrapper\");\r\n\r\n  // Get last page value\r\n  const pageLimiter = $(\"[data-cy='page-link-last']\");\r\n  const pageLimit = parseInt(pageLimiter.text().replace(/\\s\\s+/g, \"\"));\r\n\r\n  // Get all the values from database\r\n  const olxScrapes = await db.get(\"olxScrape\").value();\r\n\r\n  const dt = new Date();\r\n\r\n  // Add only new offers to offersObj Array\r\n  const offersObj = Array.from(offers).reduce((acc, el) => {\r\n    // Get current element link value\r\n    const currentLink = $(el)\r\n      .find('[data-cy=\"listing-ad-title\"]')\r\n      .attr(\"href\");\r\n\r\n    /**\r\n     * Check if this link is already present in databse,\r\n     * if it is not, then we can add this value,\r\n     * otherwise skip it\r\n     */\r\n    //\r\n    if (!olxScrapes.find(item => item.link === currentLink)) {\r\n      return [\r\n        ...acc,\r\n        // Scraping specific fields and formatting it\r\n        {\r\n          title: $(el)\r\n            .find('[data-cy=\"listing-ad-title\"]')\r\n            .text()\r\n            .replace(/\\s\\s+/g, \"\"),\r\n          link: $(el)\r\n            .find('[data-cy=\"listing-ad-title\"]')\r\n            .attr(\"href\"),\r\n          img: $(el)\r\n            .find(\"img\")\r\n            .attr(\"src\"),\r\n          price: $(el)\r\n            .find(\".td-price strong\")\r\n            .text(),\r\n          type: $(el)\r\n            .find(\".title-cell p small\")\r\n            .text()\r\n            .replace(/\\s\\s+/g, \"\"),\r\n          localization: $(el)\r\n            .find(\"[data-icon='location-filled']\")\r\n            .parent()\r\n            .text()\r\n            .replace(/\\s\\s+/g, \"\"),\r\n          date: `${$(el)\r\n            .find(\"[data-icon='clock']\")\r\n            .parent()\r\n            .text()\r\n            .replace(/^\\s+|\\s+$/g, \"\")\r\n            .replace(\"  \", \"-\")}-${dt.getFullYear()}`\r\n        }\r\n      ];\r\n    }\r\n    return acc;\r\n  }, []);\r\n\r\n  // Recursive iteration through all pages the get all the data\r\n  if (offersObj.length < 1) {\r\n    return offersObj;\r\n  } else {\r\n    // Regex which creates next page number from current url\r\n    const nextPageNumber = parseInt(url.match(/page=(\\d+)$/)[1], 10) + 1;\r\n    // If we didnt reach last page\r\n    if (nextPageNumber <= 3) {\r\n      const nextUrl = `https://www.olx.pl/nieruchomosci/mieszkania/katowice/?page=${nextPageNumber}`;\r\n      // Concat new values to offersObj array\r\n      return offersObj.concat(await getOlxScrape(nextUrl));\r\n    } else {\r\n      return offersObj;\r\n    }\r\n  }\r\n}\r\n\r\n// Forcing loop pause for x time (Google Geocoding API can handle only 50 request/sec)\r\nasync function giveGeocodingSomeTime() {\r\n  await timer(250);\r\n}\r\n\r\nfunction timer(ms) {\r\n  return new Promise(res => setTimeout(res, ms));\r\n}\r\n\r\n// Starting point to scraping function\r\nexport async function getOffersObj() {\r\n  const firstUrl =\r\n    \"https://www.olx.pl/nieruchomosci/mieszkania/katowice/?page=1\";\r\n  const offersObj = await getOlxScrape(firstUrl);\r\n\r\n  return offersObj;\r\n}\r\n\r\n// CRON calls this function every x time (adding new values to database)\r\nexport async function runCron(req, res, next) {\r\n  console.log(\"Scraping!\");\r\n  const offersPromise = await getOffersObj();\r\n\r\n  const dt = new Date();\r\n  const monthNames = [\r\n    \"sty\",\r\n    \"lut\",\r\n    \"mar\",\r\n    \"kwi\",\r\n    \"maj\",\r\n    \"cze\",\r\n    \"lip\",\r\n    \"sie\",\r\n    \"wrz\",\r\n    \"paź\",\r\n    \"lis\",\r\n    \"gru\"\r\n  ];\r\n\r\n  const geocoder = await NodeGeocoder(options);\r\n  let counter = 0;\r\n\r\n  // Iterate though all the scraped data array\r\n  for (let i = 0; i < offersPromise.length; i++) {\r\n    /**\r\n     * Every single offer calls Geocoding twice (for latitude and longitude)\r\n     * But Google Geocoding API can handle only 50 request/sec\r\n     * So when counter reaches 24 (48 Geocoding request)\r\n     * We force loop to wait some time\r\n     */\r\n    if (counter >= 48) {\r\n      counter = 0;\r\n      await giveGeocodingSomeTime();\r\n    }\r\n\r\n    router.post(\"/offers/addOffer\", function(req, res) {\r\n      res.send(\"About this wiki\");\r\n    });\r\n\r\n    // Push new value to databse\r\n    db.get(\"olxScrape\")\r\n      .push({\r\n        id: shortid.generate(),\r\n        title: offersPromise[i].title,\r\n        link: offersPromise[i].link,\r\n        img: offersPromise[i].img,\r\n        price: offersPromise[i].price,\r\n        type: offersPromise[i].type,\r\n        localization: offersPromise[i].localization,\r\n        date: offersPromise[i].date.includes(\"dzisiaj\")\r\n          ? `${dt.getDate()}-${monthNames[dt.getMonth()]}-${dt.getFullYear()}`\r\n          : offersPromise[i].date.includes(\"wczoraj\")\r\n          ? `${dt.getDate() - 1}-${\r\n              monthNames[dt.getMonth()]\r\n            }-${dt.getFullYear()}`\r\n          : offersPromise[i].date,\r\n        position: await geocoder\r\n          .geocode(\r\n            offersPromise[i].localization === \"Katowice, Śródmieście\"\r\n              ? \"Katowice, Dworzec\"\r\n              : offersPromise[i].localization\r\n          )\r\n          .then(res => {\r\n            let lat = res[0].latitude.toString();\r\n            let lng = res[0].longitude.toString();\r\n\r\n            const latToSwap = lat.substr(5);\r\n            const lngToSwap = lng.substr(5);\r\n\r\n            const randLat = Math.floor(\r\n              Math.random(parseInt(latToSwap)) * 10000\r\n            );\r\n            const randLng = Math.floor(\r\n              Math.random(parseInt(lngToSwap)) * 10000\r\n            );\r\n\r\n            lat = lat.substr(0, 5) + randLat;\r\n            lng = lng.substr(0, 5) + randLng;\r\n\r\n            return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n          })\r\n          .catch(function(err) {\r\n            console.log(err);\r\n          })\r\n      })\r\n      .write();\r\n    counter++;\r\n  }\r\n\r\n  console.log(\"DONE!\");\r\n}\r\n\r\n// runCron();\r\n"]}