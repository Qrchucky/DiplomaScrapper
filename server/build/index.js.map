{"version":3,"sources":["../src/index.js"],"names":["express","require","path","cluster","numCPUs","cpus","length","mongoose","bodyParser","passport","morgan","LocalStrategy","Strategy","routes","User","isDev","process","env","NODE_ENV","PORT","isMaster","console","error","pid","i","fork","on","worker","code","signal","app","use","static","resolve","__dirname","json","authenticate","serializeUser","deserializeUser","urlencoded","extended","initialize","session","req","res","next","setHeader","connect","useNewUrlParser","useUnifiedTopology","conn","connection","bind","once","log","listen"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,UAAUH,QAAQ,IAAR,EAAcI,IAAd,GAAqBC,MAArC;AACA,IAAMC,WAAWN,QAAQ,UAAR,CAAjB;AACA,IAAMO,aAAaP,QAAQ,aAAR,CAAnB;AACA,IAAMQ,WAAWR,QAAQ,UAAR,CAAjB;AACA,IAAMS,SAAST,QAAQ,QAAR,CAAf;AACA,IAAMU,gBAAgBV,QAAQ,gBAAR,EAA0BW,QAAhD;AACA,IAAMC,SAASZ,QAAQ,UAAR,CAAf;AACA,IAAMa,OAAOb,QAAQ,eAAR,CAAb;AACAA,QAAQ,gBAAR;AACAA,QAAQ,qBAAR;AACAA,QAAQ,gBAAR;;AAEA,IAAMc,QAAQC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAvC;AACA,IAAMC,OAAOH,QAAQC,GAAR,CAAYE,IAAZ,IAAoB,IAAjC;;AAEA;AACA,IAAI,CAACJ,KAAD,IAAUZ,QAAQiB,QAAtB,EAAgC;AAC9BC,UAAQC,KAAR,0BAAqCN,QAAQO,GAA7C;;AAEA;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIpB,OAApB,EAA6BoB,GAA7B,EAAkC;AAChCrB,YAAQsB,IAAR;AACD;;AAEDtB,UAAQuB,EAAR,CAAW,MAAX,EAAmB,UAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,EAA0B;AAC3CR,YAAQC,KAAR,0BACyBK,OAAOX,OAAP,CAAeO,GADxC,sBAC4DK,IAD5D,iBAC4EC,MAD5E;AAGD,GAJD;AAKD,CAbD,MAaO;AACL,MAAMC,MAAM9B,SAAZ;;AAEA;AACA8B,MAAIC,GAAJ,CAAQ/B,QAAQgC,MAAR,CAAe9B,KAAK+B,OAAL,CAAaC,SAAb,EAAwB,sBAAxB,CAAf,CAAR;;AAEAJ,MAAIC,GAAJ,CAAQvB,WAAW2B,IAAX,EAAR;AACAL,MAAIC,GAAJ,CAAQrB,OAAO,UAAP,CAAR;AACAD,WAASsB,GAAT,CAAa,IAAIpB,aAAJ,CAAkBG,KAAKsB,YAAL,EAAlB,CAAb;AACA3B,WAAS4B,aAAT,CAAuBvB,KAAKuB,aAAL,EAAvB;AACA5B,WAAS6B,eAAT,CAAyBxB,KAAKwB,eAAL,EAAzB;AACAR,MAAIC,GAAJ,CAAQ/B,QAAQuC,UAAR,CAAmB,EAAEC,UAAU,IAAZ,EAAnB,CAAR;AACAV,MAAIC,GAAJ,CAAQtB,SAASgC,UAAT,EAAR;AACAX,MAAIC,GAAJ,CAAQtB,SAASiC,OAAT,EAAR;;AAEAZ,MAAIC,GAAJ,CAAQ,UAASY,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BD,QAAIE,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAF,QAAIE,SAAJ,CACE,8BADF,EAEE,gDAFF;AAIAF,QAAIE,SAAJ,CACE,8BADF,EAEE,mCAFF;AAIAD;AACD,GAXD;;AAaAtC,WAASwC,OAAT,CACE,6FADF,EAEE,EAAEC,iBAAiB,IAAnB,EAAyBC,oBAAoB,IAA7C,EAFF;;AAKA,MAAMC,OAAO3C,SAAS4C,UAAtB;AACAD,OAAKxB,EAAL,CAAQ,OAAR,EAAiBL,QAAQC,KAAR,CAAc8B,IAAd,CAAmB/B,OAAnB,EAA4B,mBAA5B,CAAjB;AACA6B,OAAKG,IAAL,CAAU,MAAV,EAAkB,YAAM;AACtBhC,YAAQiC,GAAR,CAAY,6BAAZ;AACAxB,QAAIyB,MAAJ,CAAWpC,IAAX,EAAiB;AAAA,aAAME,QAAQiC,GAAR,+BAAwCnC,IAAxC,OAAN;AAAA,KAAjB;AACAW,QAAIC,GAAJ,CAAQ,MAAR,EAAgBlB,MAAhB;AACD,GAJD;AAKD","file":"index.js","sourcesContent":["const express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst cluster = require(\"cluster\");\r\nconst numCPUs = require(\"os\").cpus().length;\r\nconst mongoose = require(\"mongoose\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst passport = require(\"passport\");\r\nconst morgan = require(\"morgan\");\r\nconst LocalStrategy = require(\"passport-local\").Strategy;\r\nconst routes = require(\"./routes\");\r\nconst User = require(\"./models/User\");\r\nrequire(\"./lib/scrapper\");\r\nrequire(\"babel-core/register\");\r\nrequire(\"babel-polyfill\");\r\n\r\nconst isDev = process.env.NODE_ENV !== \"production\";\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Multi-process to utilize all CPU cores.\r\nif (!isDev && cluster.isMaster) {\r\n  console.error(`Node cluster master ${process.pid} is running`);\r\n\r\n  // Fork workers.\r\n  for (let i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n\r\n  cluster.on(\"exit\", (worker, code, signal) => {\r\n    console.error(\r\n      `Node cluster worker ${worker.process.pid} exited: code ${code}, signal ${signal}`\r\n    );\r\n  });\r\n} else {\r\n  const app = express();\r\n\r\n  // Priority serve any static files.\r\n  app.use(express.static(path.resolve(__dirname, \"../../react-ui/build\")));\r\n\r\n  app.use(bodyParser.json());\r\n  app.use(morgan(\"combined\"));\r\n  passport.use(new LocalStrategy(User.authenticate()));\r\n  passport.serializeUser(User.serializeUser());\r\n  passport.deserializeUser(User.deserializeUser());\r\n  app.use(express.urlencoded({ extended: true }));\r\n  app.use(passport.initialize());\r\n  app.use(passport.session());\r\n\r\n  app.use(function(req, res, next) {\r\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.setHeader(\r\n      \"Access-Control-Allow-Headers\",\r\n      \"Origin, X-Requested-With, Content-Type, Accept\"\r\n    );\r\n    res.setHeader(\r\n      \"Access-Control-Allow-Methods\",\r\n      \"POST, GET, PATCH, DELETE, OPTIONS\"\r\n    );\r\n    next();\r\n  });\r\n\r\n  mongoose.connect(\r\n    \"mongodb+srv://admin:admin@homepin-mscnm.gcp.mongodb.net/HomePin?retryWrites=true&w=majority\",\r\n    { useNewUrlParser: true, useUnifiedTopology: true }\r\n  );\r\n\r\n  const conn = mongoose.connection;\r\n  conn.on(\"error\", console.error.bind(console, \"connection error:\"));\r\n  conn.once(\"open\", () => {\r\n    console.log(\"Connected to mlab database!\");\r\n    app.listen(PORT, () => console.log(`App is listening on port ${PORT}!`));\r\n    app.use(\"/api\", routes);\r\n  });\r\n}\r\n"]}