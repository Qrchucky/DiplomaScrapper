{"version":3,"sources":["../src/index.js"],"names":["express","require","path","cluster","numCPUs","cpus","length","mongoose","bodyParser","passport","morgan","LocalStrategy","Strategy","routes","User","db","isDev","process","env","NODE_ENV","PORT","isMaster","console","error","pid","i","fork","on","worker","code","signal","app","use","static","resolve","__dirname","json","authenticate","serializeUser","deserializeUser","urlencoded","extended","initialize","session","connect","useNewUrlParser","useUnifiedTopology","get","req","res","set","olxScrapes","value","request","response","sendFile","listen"],"mappings":"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","file":"index.js","sourcesContent":["const express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst cluster = require(\"cluster\");\r\nconst numCPUs = require(\"os\").cpus().length;\r\nconst mongoose = require(\"mongoose\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst passport = require(\"passport\");\r\nconst morgan = require(\"morgan\");\r\nconst LocalStrategy = require(\"passport-local\").Strategy;\r\nconst routes = require(\"./routes\");\r\nconst User = require(\"./models/User\");\r\nconst db = require(\"./lib/db\");\r\nrequire(\"./lib/scrapper\");\r\nrequire(\"babel-core/register\");\r\nrequire(\"babel-polyfill\");\r\n\r\nconst isDev = process.env.NODE_ENV !== \"production\";\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Multi-process to utilize all CPU cores.\r\nif (!isDev && cluster.isMaster) {\r\n  console.error(`Node cluster master ${process.pid} is running`);\r\n\r\n  // Fork workers.\r\n  for (let i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n\r\n  cluster.on(\"exit\", (worker, code, signal) => {\r\n    console.error(\r\n      `Node cluster worker ${worker.process.pid} exited: code ${code}, signal ${signal}`\r\n    );\r\n  });\r\n} else {\r\n  const app = express();\r\n\r\n  // Priority serve any static files.\r\n  app.use(express.static(path.resolve(__dirname, \"../../react-ui/build\")));\r\n\r\n  app.use(bodyParser.json());\r\n  app.use(morgan(\"combined\"));\r\n  passport.use(new LocalStrategy(User.authenticate()));\r\n  passport.serializeUser(User.serializeUser());\r\n  passport.deserializeUser(User.deserializeUser());\r\n  app.use(express.urlencoded({ extended: true }));\r\n  app.use(passport.initialize());\r\n  app.use(passport.session());\r\n\r\n  mongoose.connect(\r\n    \"mongodb+srv://admin:admin@homepin-mscnm.gcp.mongodb.net/HomePin?retryWrites=true&w=majority\",\r\n    { useNewUrlParser: true, useUnifiedTopology: true }\r\n  );\r\n\r\n  // Answer API requests.\r\n  app.get(\"/api/offers/getOffers\", function(req, res) {\r\n    res.set(\"Content-Type\", \"application/json\");\r\n\r\n    // Get the scrape data\r\n    const olxScrapes = db.get(\"olxScrape\").value();\r\n\r\n    // Respond with JSON\r\n    res.json(olxScrapes);\r\n  });\r\n\r\n  // All remaining requests return the React app, so it can handle routing.\r\n  app.get(\"*\", function(request, response) {\r\n    response.sendFile(\r\n      path.resolve(__dirname, \"../../react-ui/build\", \"index.html\")\r\n    );\r\n  });\r\n\r\n  app.listen(PORT, function() {\r\n    console.error(\r\n      `Node ${\r\n        isDev ? \"dev server\" : \"cluster worker \" + process.pid\r\n      }: listening on port ${PORT}`\r\n    );\r\n  });\r\n}\r\n"]}